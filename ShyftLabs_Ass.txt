Ques-1

public class Main {
    public static void main(String[] args) {
        int[] array1 = {3, 4, 1, 2, 7, 8, 20, 33, -1, -1, -1, -1};
        int[] array2 = {-1, -1, -1, -1};
        
        System.out.println(findIndex(array1)); 
        System.out.println(findIndex(array2)); 
    }

    public static int findIndex(int[] arr) {
        int index = 0;
        int jump = 1;

        while (arr[index] != -1) {
            index += jump;
            jump *= 2;
        }

        return binarySearch(arr, index - jump / 2, index);
    }

    public static int binarySearch(int[] arr, int low, int high) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == -1 && (mid == 0 || arr[mid - 1] != -1)) {
                return mid;
            } else if (arr[mid] == -1) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }
}

Ques-2

public class Piece {
    private String color;
    private int x;
    private int y;

    public Piece(String color, int x, int y) {
        this.color = color;
        this.x = x;
        this.y = y;
    }

    public String getColor() {
        return color;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }

    public void move(int newX, int newY) {
        this.x = newX;
        this.y = newY;
    }
}

public class King extends Piece {
    public King(String color, int x, int y) {
        super(color, x, y);
    }

}
public class Board {
    private Piece[][] board;

    public Board() {
        board = new Piece[8][8];
        
    }

    public Piece getPiece(int x, int y) {
        return board[x][y];
    }

    public void movePiece(int startX, int startY, int endX, int endY) {
        Piece piece = board[startX][startY];
        if (piece != null) {
            board[endX][endY] = piece;
            piece.move(endX, endY);
            board[startX][startY] = null;
        } else {
            // Handle error: No piece found at startX, startY
        }
    }
}

public class ChessGame {
    public static void main(String[] args) {
        Board board = new Board();
    }
}

